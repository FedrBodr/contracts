// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calculation_service/calculation_service.proto

package calculation_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalculateSuccessTransactionRequest struct {
	ProviderId           int32    `protobuf:"varint,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	MerchantId           int32    `protobuf:"varint,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	OrderId              int32    `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Amount               int32    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateSuccessTransactionRequest) Reset()         { *m = CalculateSuccessTransactionRequest{} }
func (m *CalculateSuccessTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateSuccessTransactionRequest) ProtoMessage()    {}
func (*CalculateSuccessTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa5168ad3d3ac87, []int{0}
}
func (m *CalculateSuccessTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateSuccessTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateSuccessTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateSuccessTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateSuccessTransactionRequest.Merge(m, src)
}
func (m *CalculateSuccessTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CalculateSuccessTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateSuccessTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateSuccessTransactionRequest proto.InternalMessageInfo

func (m *CalculateSuccessTransactionRequest) GetProviderId() int32 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *CalculateSuccessTransactionRequest) GetMerchantId() int32 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *CalculateSuccessTransactionRequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *CalculateSuccessTransactionRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CalculateSuccessTransactionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateSuccessTransactionResponse) Reset()         { *m = CalculateSuccessTransactionResponse{} }
func (m *CalculateSuccessTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateSuccessTransactionResponse) ProtoMessage()    {}
func (*CalculateSuccessTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa5168ad3d3ac87, []int{1}
}
func (m *CalculateSuccessTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateSuccessTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateSuccessTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateSuccessTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateSuccessTransactionResponse.Merge(m, src)
}
func (m *CalculateSuccessTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CalculateSuccessTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateSuccessTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateSuccessTransactionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CalculateSuccessTransactionRequest)(nil), "calculation_service.CalculateSuccessTransactionRequest")
	proto.RegisterType((*CalculateSuccessTransactionResponse)(nil), "calculation_service.CalculateSuccessTransactionResponse")
}

func init() {
	proto.RegisterFile("calculation_service/calculation_service.proto", fileDescriptor_6aa5168ad3d3ac87)
}

var fileDescriptor_6aa5168ad3d3ac87 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0xc7, 0x22, 0xa6, 0x57, 0x50, 0x94, 0x5f, 0x92, 0x2f, 0x24, 0x8c, 0x45, 0x4a, 0x69, 0x26, 0x23,
	0x97, 0x92, 0x33, 0x54, 0x3c, 0x35, 0xb8, 0x34, 0x39, 0x39, 0xb5, 0xb8, 0x38, 0xa4, 0x28, 0x31,
	0xaf, 0x38, 0x31, 0x19, 0xa4, 0x2e, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x9e, 0x8b,
	0xbb, 0xa0, 0x28, 0xbf, 0x2c, 0x33, 0x25, 0xb5, 0x28, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x35, 0x88, 0x0b, 0x26, 0xe4, 0x99, 0x02, 0x52, 0x90, 0x9b, 0x5a, 0x94, 0x9c, 0x91, 0x98,
	0x57, 0x02, 0x52, 0xc0, 0x04, 0x51, 0x00, 0x13, 0xf2, 0x4c, 0x11, 0x92, 0xe4, 0xe2, 0xc8, 0x2f,
	0x82, 0x6a, 0x67, 0x06, 0xcb, 0xb2, 0x83, 0xf9, 0x9e, 0x29, 0x42, 0x62, 0x5c, 0x6c, 0x89, 0xb9,
	0xf9, 0xa5, 0x79, 0x25, 0x12, 0x2c, 0x60, 0x09, 0x28, 0x4f, 0x49, 0x95, 0x4b, 0x19, 0xaf, 0xd3,
	0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x8d, 0x96, 0x33, 0x72, 0x09, 0x39, 0x23, 0xbc, 0x16, 0x0c,
	0xf1, 0x99, 0xd0, 0x04, 0x46, 0x2e, 0x69, 0x3c, 0xda, 0x85, 0xcc, 0xf5, 0xb0, 0x05, 0x15, 0xe1,
	0xb0, 0x90, 0xb2, 0x20, 0x5d, 0x23, 0xc4, 0xa5, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0xe0, 0xa8, 0x31,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xad, 0x94, 0xd5, 0x82, 0xcb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculationServiceClient is the client API for CalculationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculationServiceClient interface {
	CalculateSuccessTransaction(ctx context.Context, in *CalculateSuccessTransactionRequest, opts ...grpc.CallOption) (*CalculateSuccessTransactionResponse, error)
}

type calculationServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculationServiceClient(cc *grpc.ClientConn) CalculationServiceClient {
	return &calculationServiceClient{cc}
}

func (c *calculationServiceClient) CalculateSuccessTransaction(ctx context.Context, in *CalculateSuccessTransactionRequest, opts ...grpc.CallOption) (*CalculateSuccessTransactionResponse, error) {
	out := new(CalculateSuccessTransactionResponse)
	err := c.cc.Invoke(ctx, "/calculation_service.CalculationService/CalculateSuccessTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServiceServer is the server API for CalculationService service.
type CalculationServiceServer interface {
	CalculateSuccessTransaction(context.Context, *CalculateSuccessTransactionRequest) (*CalculateSuccessTransactionResponse, error)
}

// UnimplementedCalculationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculationServiceServer struct {
}

func (*UnimplementedCalculationServiceServer) CalculateSuccessTransaction(ctx context.Context, req *CalculateSuccessTransactionRequest) (*CalculateSuccessTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSuccessTransaction not implemented")
}

func RegisterCalculationServiceServer(s *grpc.Server, srv CalculationServiceServer) {
	s.RegisterService(&_CalculationService_serviceDesc, srv)
}

func _CalculationService_CalculateSuccessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSuccessTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).CalculateSuccessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculation_service.CalculationService/CalculateSuccessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).CalculateSuccessTransaction(ctx, req.(*CalculateSuccessTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculation_service.CalculationService",
	HandlerType: (*CalculationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateSuccessTransaction",
			Handler:    _CalculationService_CalculateSuccessTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculation_service/calculation_service.proto",
}

func (m *CalculateSuccessTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateSuccessTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateSuccessTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintCalculationService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != 0 {
		i = encodeVarintCalculationService(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.MerchantId != 0 {
		i = encodeVarintCalculationService(dAtA, i, uint64(m.MerchantId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProviderId != 0 {
		i = encodeVarintCalculationService(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalculateSuccessTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateSuccessTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateSuccessTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CalculateSuccessTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderId != 0 {
		n += 1 + sovCalculationService(uint64(m.ProviderId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovCalculationService(uint64(m.MerchantId))
	}
	if m.OrderId != 0 {
		n += 1 + sovCalculationService(uint64(m.OrderId))
	}
	if m.Amount != 0 {
		n += 1 + sovCalculationService(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateSuccessTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCalculationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculationService(x uint64) (n int) {
	return sovCalculationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CalculateSuccessTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateSuccessTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateSuccessTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateSuccessTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateSuccessTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateSuccessTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCalculationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculationService = fmt.Errorf("proto: unexpected end of group")
)
