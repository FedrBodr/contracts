// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merchant_service/merchant_service.proto

package merchant_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MerchantElement struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerchantElement) Reset()         { *m = MerchantElement{} }
func (m *MerchantElement) String() string { return proto.CompactTextString(m) }
func (*MerchantElement) ProtoMessage()    {}
func (*MerchantElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{0}
}
func (m *MerchantElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerchantElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantElement.Merge(m, src)
}
func (m *MerchantElement) XXX_Size() int {
	return m.Size()
}
func (m *MerchantElement) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantElement.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantElement proto.InternalMessageInfo

func (m *MerchantElement) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMerchantCredentialsRequest struct {
	MerchantId           int32    `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ProviderId           int32    `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	Trace                string   `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantCredentialsRequest) Reset()         { *m = GetMerchantCredentialsRequest{} }
func (m *GetMerchantCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMerchantCredentialsRequest) ProtoMessage()    {}
func (*GetMerchantCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{1}
}
func (m *GetMerchantCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantCredentialsRequest.Merge(m, src)
}
func (m *GetMerchantCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantCredentialsRequest proto.InternalMessageInfo

func (m *GetMerchantCredentialsRequest) GetMerchantId() int32 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetMerchantCredentialsRequest) GetProviderId() int32 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *GetMerchantCredentialsRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetMerchantCredentialsResponse struct {
	ReturnUrl            string   `protobuf:"bytes,1,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	SuccessUrl           string   `protobuf:"bytes,2,opt,name=success_url,json=successUrl,proto3" json:"success_url,omitempty"`
	DeclineUrl           string   `protobuf:"bytes,3,opt,name=decline_url,json=declineUrl,proto3" json:"decline_url,omitempty"`
	FailUrl              string   `protobuf:"bytes,4,opt,name=fail_url,json=failUrl,proto3" json:"fail_url,omitempty"`
	CancelUrl            string   `protobuf:"bytes,5,opt,name=cancel_url,json=cancelUrl,proto3" json:"cancel_url,omitempty"`
	NotificationUrl      string   `protobuf:"bytes,6,opt,name=notification_url,json=notificationUrl,proto3" json:"notification_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantCredentialsResponse) Reset()         { *m = GetMerchantCredentialsResponse{} }
func (m *GetMerchantCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMerchantCredentialsResponse) ProtoMessage()    {}
func (*GetMerchantCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{2}
}
func (m *GetMerchantCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantCredentialsResponse.Merge(m, src)
}
func (m *GetMerchantCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantCredentialsResponse proto.InternalMessageInfo

func (m *GetMerchantCredentialsResponse) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetSuccessUrl() string {
	if m != nil {
		return m.SuccessUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetDeclineUrl() string {
	if m != nil {
		return m.DeclineUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetFailUrl() string {
	if m != nil {
		return m.FailUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetCancelUrl() string {
	if m != nil {
		return m.CancelUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetNotificationUrl() string {
	if m != nil {
		return m.NotificationUrl
	}
	return ""
}

type GetMerchantByIDRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Trace                string   `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantByIDRequest) Reset()         { *m = GetMerchantByIDRequest{} }
func (m *GetMerchantByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetMerchantByIDRequest) ProtoMessage()    {}
func (*GetMerchantByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{3}
}
func (m *GetMerchantByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantByIDRequest.Merge(m, src)
}
func (m *GetMerchantByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantByIDRequest proto.InternalMessageInfo

func (m *GetMerchantByIDRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetMerchantByIDRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetMerchantByIDResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Domain               string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantByIDResponse) Reset()         { *m = GetMerchantByIDResponse{} }
func (m *GetMerchantByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetMerchantByIDResponse) ProtoMessage()    {}
func (*GetMerchantByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{4}
}
func (m *GetMerchantByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantByIDResponse.Merge(m, src)
}
func (m *GetMerchantByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantByIDResponse proto.InternalMessageInfo

func (m *GetMerchantByIDResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetMerchantByIDResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *GetMerchantByIDResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetMerchantByIDResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type GetMerchantsRequest struct {
	Trace                string   `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantsRequest) Reset()         { *m = GetMerchantsRequest{} }
func (m *GetMerchantsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMerchantsRequest) ProtoMessage()    {}
func (*GetMerchantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{5}
}
func (m *GetMerchantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantsRequest.Merge(m, src)
}
func (m *GetMerchantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantsRequest proto.InternalMessageInfo

func (m *GetMerchantsRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *GetMerchantsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetMerchantsRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetMerchantsResponse struct {
	Merchants            []*MerchantElement `protobuf:"bytes,1,rep,name=merchants,proto3" json:"merchants,omitempty"`
	Count                int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetMerchantsResponse) Reset()         { *m = GetMerchantsResponse{} }
func (m *GetMerchantsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMerchantsResponse) ProtoMessage()    {}
func (*GetMerchantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_426815e87d7b388e, []int{6}
}
func (m *GetMerchantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantsResponse.Merge(m, src)
}
func (m *GetMerchantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantsResponse proto.InternalMessageInfo

func (m *GetMerchantsResponse) GetMerchants() []*MerchantElement {
	if m != nil {
		return m.Merchants
	}
	return nil
}

func (m *GetMerchantsResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*MerchantElement)(nil), "merchant_service.MerchantElement")
	proto.RegisterType((*GetMerchantCredentialsRequest)(nil), "merchant_service.GetMerchantCredentialsRequest")
	proto.RegisterType((*GetMerchantCredentialsResponse)(nil), "merchant_service.GetMerchantCredentialsResponse")
	proto.RegisterType((*GetMerchantByIDRequest)(nil), "merchant_service.GetMerchantByIDRequest")
	proto.RegisterType((*GetMerchantByIDResponse)(nil), "merchant_service.GetMerchantByIDResponse")
	proto.RegisterType((*GetMerchantsRequest)(nil), "merchant_service.GetMerchantsRequest")
	proto.RegisterType((*GetMerchantsResponse)(nil), "merchant_service.GetMerchantsResponse")
}

func init() {
	proto.RegisterFile("merchant_service/merchant_service.proto", fileDescriptor_426815e87d7b388e)
}

var fileDescriptor_426815e87d7b388e = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x6e, 0x13, 0xc8, 0x14, 0x91, 0x68, 0xa9, 0x4a, 0xa8, 0x14, 0x93, 0x5a, 0x02, 0xd2,
	0x4b, 0x8b, 0xca, 0x1d, 0xa4, 0x02, 0x42, 0x39, 0x70, 0x31, 0xea, 0x81, 0x03, 0xaa, 0x96, 0xf5,
	0x58, 0xac, 0xb0, 0xd7, 0x61, 0x77, 0x5d, 0x84, 0xf8, 0x23, 0xfc, 0x24, 0x8e, 0x5c, 0xb8, 0xa3,
	0x20, 0xf1, 0x3b, 0xd0, 0x7e, 0xd8, 0x71, 0x1d, 0x08, 0xbd, 0x65, 0xde, 0xbc, 0x79, 0x6f, 0x66,
	0x76, 0x62, 0x78, 0x58, 0xa0, 0x64, 0xef, 0xa9, 0xd0, 0xe7, 0x0a, 0xe5, 0x05, 0x67, 0x78, 0xdc,
	0x05, 0x8e, 0x16, 0xb2, 0xd4, 0x25, 0x19, 0x75, 0xf1, 0xf8, 0x00, 0x86, 0xaf, 0x3c, 0xf6, 0x22,
	0xc7, 0x02, 0x85, 0x26, 0xb7, 0x20, 0xe4, 0xe9, 0x38, 0x98, 0x06, 0xb3, 0x5e, 0x12, 0xf2, 0x34,
	0xfe, 0x04, 0x93, 0x97, 0xa8, 0x6b, 0xd6, 0x33, 0x89, 0x29, 0x0a, 0xcd, 0x69, 0xae, 0x12, 0xfc,
	0x58, 0xa1, 0xd2, 0xe4, 0x1e, 0xec, 0x34, 0xba, 0x4d, 0x25, 0xd4, 0xd0, 0x3c, 0x35, 0x84, 0x85,
	0x2c, 0x2f, 0x78, 0x8a, 0xd2, 0x10, 0x42, 0x47, 0xa8, 0xa1, 0x79, 0x4a, 0x76, 0xa1, 0xa7, 0x25,
	0x65, 0x38, 0xde, 0x9a, 0x06, 0xb3, 0x41, 0xe2, 0x82, 0xf8, 0x77, 0x00, 0xd1, 0xbf, 0x9c, 0xd5,
	0xa2, 0x14, 0x0a, 0xc9, 0x04, 0x40, 0xa2, 0xae, 0xa4, 0x38, 0xaf, 0x64, 0x6e, 0x9d, 0x07, 0xc9,
	0xc0, 0x21, 0x67, 0x32, 0x37, 0xc6, 0xaa, 0x62, 0x0c, 0x95, 0xb2, 0xf9, 0xd0, 0xe6, 0xc1, 0x43,
	0x9e, 0x90, 0x22, 0xcb, 0xb9, 0x40, 0x4b, 0x70, 0xf6, 0xe0, 0x21, 0x43, 0xb8, 0x0b, 0x37, 0x32,
	0xca, 0x73, 0x9b, 0xdd, 0xb6, 0xd9, 0xeb, 0x26, 0x36, 0xa9, 0x09, 0x00, 0xa3, 0x82, 0xa1, 0x4b,
	0xf6, 0x9c, 0xb7, 0x43, 0x4c, 0xfa, 0x10, 0x46, 0xa2, 0xd4, 0x3c, 0xe3, 0x8c, 0x6a, 0x5e, 0xba,
	0x06, 0xfb, 0x96, 0x34, 0x6c, 0xe3, 0x67, 0x32, 0x8f, 0x9f, 0xc0, 0x5e, 0x6b, 0xce, 0xd3, 0xcf,
	0xf3, 0xe7, 0xf5, 0x6a, 0x3b, 0x6f, 0xb1, 0x5a, 0x54, 0xd8, 0x5e, 0xd4, 0x07, 0xb8, 0xb3, 0x56,
	0xef, 0x17, 0xf4, 0x17, 0x01, 0x9a, 0x73, 0xaa, 0x6a, 0x01, 0x1b, 0x10, 0x02, 0xdb, 0x82, 0x16,
	0xf5, 0xfa, 0xed, 0x6f, 0xb2, 0x07, 0xfd, 0xb4, 0x2c, 0x28, 0x17, 0x7e, 0x6e, 0x1f, 0xc5, 0x6f,
	0xe0, 0x76, 0xcb, 0xac, 0x39, 0x82, 0xa6, 0xb3, 0xa0, 0xd5, 0x99, 0x41, 0x73, 0x5e, 0x70, 0xed,
	0xdf, 0xdc, 0x05, 0x46, 0xba, 0xcc, 0x32, 0x85, 0xda, 0x1a, 0xf6, 0x12, 0x1f, 0xc5, 0x05, 0xec,
	0x5e, 0x96, 0xf6, 0x43, 0x3c, 0x85, 0x41, 0x7d, 0x4d, 0x6a, 0x1c, 0x4c, 0xb7, 0x66, 0x3b, 0x27,
	0x07, 0x47, 0x6b, 0x27, 0xde, 0xb9, 0xe3, 0x64, 0x55, 0x63, 0xda, 0x60, 0x65, 0x25, 0x9a, 0x36,
	0x6c, 0x70, 0xf2, 0x23, 0x5c, 0x1d, 0xff, 0x6b, 0x27, 0x42, 0xbe, 0x5c, 0x7a, 0x8a, 0xd6, 0xc9,
	0x91, 0xe3, 0x75, 0xc7, 0x8d, 0x7f, 0x8b, 0xfd, 0x47, 0x57, 0x2f, 0xf0, 0x73, 0x66, 0x30, 0xec,
	0xbc, 0x23, 0x99, 0x6d, 0x14, 0x69, 0x9d, 0xca, 0xfe, 0xe1, 0x15, 0x98, 0xde, 0xe7, 0x2d, 0xdc,
	0x6c, 0xef, 0x99, 0xdc, 0xdf, 0x58, 0xda, 0x0c, 0xf4, 0xe0, 0x7f, 0x34, 0x27, 0x7f, 0x3a, 0xfa,
	0xb6, 0x8c, 0x82, 0xef, 0xcb, 0x28, 0xf8, 0xb9, 0x8c, 0x82, 0xaf, 0xbf, 0xa2, 0x6b, 0xef, 0xfa,
	0xf6, 0xf3, 0xf3, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x61, 0x07, 0x4c, 0xa9, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	GetMerchantCredentials(ctx context.Context, in *GetMerchantCredentialsRequest, opts ...grpc.CallOption) (*GetMerchantCredentialsResponse, error)
	GetMerchantByID(ctx context.Context, in *GetMerchantByIDRequest, opts ...grpc.CallOption) (*GetMerchantByIDResponse, error)
	GetMerchants(ctx context.Context, in *GetMerchantsRequest, opts ...grpc.CallOption) (*GetMerchantsResponse, error)
}

type merchantServiceClient struct {
	cc *grpc.ClientConn
}

func NewMerchantServiceClient(cc *grpc.ClientConn) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetMerchantCredentials(ctx context.Context, in *GetMerchantCredentialsRequest, opts ...grpc.CallOption) (*GetMerchantCredentialsResponse, error) {
	out := new(GetMerchantCredentialsResponse)
	err := c.cc.Invoke(ctx, "/merchant_service.MerchantService/GetMerchantCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantByID(ctx context.Context, in *GetMerchantByIDRequest, opts ...grpc.CallOption) (*GetMerchantByIDResponse, error) {
	out := new(GetMerchantByIDResponse)
	err := c.cc.Invoke(ctx, "/merchant_service.MerchantService/GetMerchantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchants(ctx context.Context, in *GetMerchantsRequest, opts ...grpc.CallOption) (*GetMerchantsResponse, error) {
	out := new(GetMerchantsResponse)
	err := c.cc.Invoke(ctx, "/merchant_service.MerchantService/GetMerchants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	GetMerchantCredentials(context.Context, *GetMerchantCredentialsRequest) (*GetMerchantCredentialsResponse, error)
	GetMerchantByID(context.Context, *GetMerchantByIDRequest) (*GetMerchantByIDResponse, error)
	GetMerchants(context.Context, *GetMerchantsRequest) (*GetMerchantsResponse, error)
}

// UnimplementedMerchantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (*UnimplementedMerchantServiceServer) GetMerchantCredentials(ctx context.Context, req *GetMerchantCredentialsRequest) (*GetMerchantCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCredentials not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchantByID(ctx context.Context, req *GetMerchantByIDRequest) (*GetMerchantByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantByID not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchants(ctx context.Context, req *GetMerchantsRequest) (*GetMerchantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchants not implemented")
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_GetMerchantCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service.MerchantService/GetMerchantCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantCredentials(ctx, req.(*GetMerchantCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service.MerchantService/GetMerchantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantByID(ctx, req.(*GetMerchantByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service.MerchantService/GetMerchants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchants(ctx, req.(*GetMerchantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merchant_service.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchantCredentials",
			Handler:    _MerchantService_GetMerchantCredentials_Handler,
		},
		{
			MethodName: "GetMerchantByID",
			Handler:    _MerchantService_GetMerchantByID_Handler,
		},
		{
			MethodName: "GetMerchants",
			Handler:    _MerchantService_GetMerchants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_service/merchant_service.proto",
}

func (m *MerchantElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerchantElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProviderId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.MerchantId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.MerchantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotificationUrl) > 0 {
		i -= len(m.NotificationUrl)
		copy(dAtA[i:], m.NotificationUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.NotificationUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CancelUrl) > 0 {
		i -= len(m.CancelUrl)
		copy(dAtA[i:], m.CancelUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.CancelUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FailUrl) > 0 {
		i -= len(m.FailUrl)
		copy(dAtA[i:], m.FailUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.FailUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeclineUrl) > 0 {
		i -= len(m.DeclineUrl)
		copy(dAtA[i:], m.DeclineUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.DeclineUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SuccessUrl) > 0 {
		i -= len(m.SuccessUrl)
		copy(dAtA[i:], m.SuccessUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.SuccessUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Merchants) > 0 {
		for iNdEx := len(m.Merchants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Merchants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerchantService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerchantService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MerchantElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovMerchantService(uint64(m.MerchantId))
	}
	if m.ProviderId != 0 {
		n += 1 + sovMerchantService(uint64(m.ProviderId))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.SuccessUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.DeclineUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.FailUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.CancelUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.NotificationUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMerchantService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovMerchantService(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Merchants) > 0 {
		for _, e := range m.Merchants {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMerchantService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMerchantService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerchantService(x uint64) (n int) {
	return sovMerchantService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MerchantElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclineUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeclineUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merchants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merchants = append(m.Merchants, &MerchantElement{})
			if err := m.Merchants[len(m.Merchants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerchantService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerchantService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerchantService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerchantService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerchantService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerchantService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerchantService = fmt.Errorf("proto: unexpected end of group")
)
