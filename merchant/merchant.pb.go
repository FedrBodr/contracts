// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merchant/merchant.proto

package merchant

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetMerchantCredentialsRequest struct {
	MerchantId           int32    `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ProviderId           int32    `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	Trace                string   `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantCredentialsRequest) Reset()         { *m = GetMerchantCredentialsRequest{} }
func (m *GetMerchantCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMerchantCredentialsRequest) ProtoMessage()    {}
func (*GetMerchantCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a7b1c9034e23211, []int{0}
}
func (m *GetMerchantCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantCredentialsRequest.Merge(m, src)
}
func (m *GetMerchantCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantCredentialsRequest proto.InternalMessageInfo

func (m *GetMerchantCredentialsRequest) GetMerchantId() int32 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetMerchantCredentialsRequest) GetProviderId() int32 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *GetMerchantCredentialsRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetMerchantCredentialsResponse struct {
	ReturnUrl            string   `protobuf:"bytes,1,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	SuccessUrl           string   `protobuf:"bytes,2,opt,name=success_url,json=successUrl,proto3" json:"success_url,omitempty"`
	DeclineUrl           string   `protobuf:"bytes,3,opt,name=decline_url,json=declineUrl,proto3" json:"decline_url,omitempty"`
	FailUrl              string   `protobuf:"bytes,4,opt,name=fail_url,json=failUrl,proto3" json:"fail_url,omitempty"`
	CancelUrl            string   `protobuf:"bytes,5,opt,name=cancel_url,json=cancelUrl,proto3" json:"cancel_url,omitempty"`
	NotificationUrl      string   `protobuf:"bytes,6,opt,name=notification_url,json=notificationUrl,proto3" json:"notification_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerchantCredentialsResponse) Reset()         { *m = GetMerchantCredentialsResponse{} }
func (m *GetMerchantCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMerchantCredentialsResponse) ProtoMessage()    {}
func (*GetMerchantCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a7b1c9034e23211, []int{1}
}
func (m *GetMerchantCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerchantCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerchantCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerchantCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerchantCredentialsResponse.Merge(m, src)
}
func (m *GetMerchantCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMerchantCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerchantCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerchantCredentialsResponse proto.InternalMessageInfo

func (m *GetMerchantCredentialsResponse) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetSuccessUrl() string {
	if m != nil {
		return m.SuccessUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetDeclineUrl() string {
	if m != nil {
		return m.DeclineUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetFailUrl() string {
	if m != nil {
		return m.FailUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetCancelUrl() string {
	if m != nil {
		return m.CancelUrl
	}
	return ""
}

func (m *GetMerchantCredentialsResponse) GetNotificationUrl() string {
	if m != nil {
		return m.NotificationUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*GetMerchantCredentialsRequest)(nil), "merchant.GetMerchantCredentialsRequest")
	proto.RegisterType((*GetMerchantCredentialsResponse)(nil), "merchant.GetMerchantCredentialsResponse")
}

func init() { proto.RegisterFile("merchant/merchant.proto", fileDescriptor_3a7b1c9034e23211) }

var fileDescriptor_3a7b1c9034e23211 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0x4d, 0xb5, 0xb5, 0x7d, 0x2e, 0x2c, 0x41, 0xb4, 0x0a, 0x1d, 0x4b, 0x37, 0xd6, 0x4d,
	0x05, 0xbd, 0x81, 0x2e, 0xa4, 0x0b, 0x37, 0x03, 0x5d, 0x97, 0x98, 0xbc, 0x62, 0x30, 0x26, 0x35,
	0xc9, 0xd8, 0xab, 0x78, 0x24, 0x97, 0x1e, 0x41, 0x46, 0xf0, 0x1c, 0x92, 0x64, 0x22, 0x2e, 0xfc,
	0xb3, 0x9b, 0xf7, 0xfd, 0x7e, 0xf0, 0xcd, 0xcb, 0x83, 0x83, 0x07, 0xb4, 0xfc, 0x8e, 0x69, 0x7f,
	0x96, 0x3f, 0xa6, 0x2b, 0x6b, 0xbc, 0xa1, 0xdd, 0x3c, 0x8f, 0xd7, 0x30, 0xbc, 0x46, 0x7f, 0xd3,
	0x8c, 0x57, 0x16, 0x05, 0x6a, 0x2f, 0x99, 0x72, 0x25, 0x3e, 0x56, 0xe8, 0x3c, 0x3d, 0x86, 0x9d,
	0x2c, 0x2f, 0xa4, 0x18, 0x90, 0x11, 0x99, 0xb4, 0x4b, 0xc8, 0xd1, 0x4c, 0x04, 0x61, 0x65, 0xcd,
	0x93, 0x14, 0x68, 0x83, 0xd0, 0x4a, 0x42, 0x8e, 0x66, 0x82, 0xee, 0x41, 0xdb, 0x5b, 0xc6, 0x71,
	0xb0, 0x39, 0x22, 0x93, 0x5e, 0x99, 0x86, 0xf1, 0x07, 0x81, 0xe2, 0xb7, 0x66, 0xb7, 0x32, 0xda,
	0x21, 0x1d, 0x02, 0x58, 0xf4, 0x95, 0xd5, 0x8b, 0xca, 0xaa, 0xd8, 0xdc, 0x2b, 0x7b, 0x29, 0x99,
	0x5b, 0x15, 0x8a, 0x5d, 0xc5, 0x39, 0x3a, 0x17, 0x79, 0x2b, 0x72, 0x68, 0xa2, 0x46, 0x10, 0xc8,
	0x95, 0xd4, 0x18, 0x85, 0x54, 0x0f, 0x4d, 0x14, 0x84, 0x43, 0xe8, 0x2e, 0x99, 0x54, 0x91, 0x6e,
	0x45, 0xba, 0x1d, 0xe6, 0x80, 0x86, 0x00, 0x9c, 0x69, 0x8e, 0x09, 0xb6, 0x53, 0x77, 0x4a, 0x02,
	0x3e, 0x85, 0xbe, 0x36, 0x5e, 0x2e, 0x25, 0x67, 0x5e, 0x9a, 0xf4, 0x83, 0x9d, 0x28, 0xed, 0x7e,
	0xcf, 0xe7, 0x56, 0x9d, 0xaf, 0xa1, 0x9b, 0x97, 0xa4, 0xf7, 0xb0, 0xff, 0xf3, 0xce, 0xf4, 0x64,
	0xfa, 0x75, 0xa2, 0x3f, 0xef, 0x71, 0x34, 0xf9, 0x5f, 0x4c, 0xcf, 0x77, 0xd9, 0x7f, 0xa9, 0x0b,
	0xf2, 0x5a, 0x17, 0xe4, 0xad, 0x2e, 0xc8, 0xf3, 0x7b, 0xb1, 0x71, 0xdb, 0x89, 0xd7, 0xbf, 0xf8,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x96, 0x23, 0x80, 0x18, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantClient interface {
	GetMerchantCredentials(ctx context.Context, in *GetMerchantCredentialsRequest, opts ...grpc.CallOption) (*GetMerchantCredentialsResponse, error)
}

type merchantClient struct {
	cc *grpc.ClientConn
}

func NewMerchantClient(cc *grpc.ClientConn) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) GetMerchantCredentials(ctx context.Context, in *GetMerchantCredentialsRequest, opts ...grpc.CallOption) (*GetMerchantCredentialsResponse, error) {
	out := new(GetMerchantCredentialsResponse)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/GetMerchantCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
type MerchantServer interface {
	GetMerchantCredentials(context.Context, *GetMerchantCredentialsRequest) (*GetMerchantCredentialsResponse, error)
}

// UnimplementedMerchantServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServer struct {
}

func (*UnimplementedMerchantServer) GetMerchantCredentials(ctx context.Context, req *GetMerchantCredentialsRequest) (*GetMerchantCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantCredentials not implemented")
}

func RegisterMerchantServer(s *grpc.Server, srv MerchantServer) {
	s.RegisterService(&_Merchant_serviceDesc, srv)
}

func _Merchant_GetMerchantCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).GetMerchantCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/GetMerchantCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).GetMerchantCredentials(ctx, req.(*GetMerchantCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Merchant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchantCredentials",
			Handler:    _Merchant_GetMerchantCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/merchant.proto",
}

func (m *GetMerchantCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProviderId != 0 {
		i = encodeVarintMerchant(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.MerchantId != 0 {
		i = encodeVarintMerchant(dAtA, i, uint64(m.MerchantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMerchantCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerchantCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerchantCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotificationUrl) > 0 {
		i -= len(m.NotificationUrl)
		copy(dAtA[i:], m.NotificationUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.NotificationUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CancelUrl) > 0 {
		i -= len(m.CancelUrl)
		copy(dAtA[i:], m.CancelUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.CancelUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FailUrl) > 0 {
		i -= len(m.FailUrl)
		copy(dAtA[i:], m.FailUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.FailUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeclineUrl) > 0 {
		i -= len(m.DeclineUrl)
		copy(dAtA[i:], m.DeclineUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.DeclineUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SuccessUrl) > 0 {
		i -= len(m.SuccessUrl)
		copy(dAtA[i:], m.SuccessUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.SuccessUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintMerchant(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerchant(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerchant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMerchantCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovMerchant(uint64(m.MerchantId))
	}
	if m.ProviderId != 0 {
		n += 1 + sovMerchant(uint64(m.ProviderId))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMerchantCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	l = len(m.SuccessUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	l = len(m.DeclineUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	l = len(m.FailUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	l = len(m.CancelUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	l = len(m.NotificationUrl)
	if l > 0 {
		n += 1 + l + sovMerchant(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMerchant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerchant(x uint64) (n int) {
	return sovMerchant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMerchantCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMerchantCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerchantCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerchantCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclineUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeclineUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerchant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerchant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerchant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerchant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerchant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerchant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerchant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerchant = fmt.Errorf("proto: unexpected end of group")
)
