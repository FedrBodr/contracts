// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order_service/order_service.proto

package order_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ByIdRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Trace                string   `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByIdRequest) Reset()         { *m = ByIdRequest{} }
func (m *ByIdRequest) String() string { return proto.CompactTextString(m) }
func (*ByIdRequest) ProtoMessage()    {}
func (*ByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{0}
}
func (m *ByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByIdRequest.Merge(m, src)
}
func (m *ByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *ByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByIdRequest proto.InternalMessageInfo

func (m *ByIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ByIdRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetOrderByAcquirefyUIDRequest struct {
	AcquirefyUid         string   `protobuf:"bytes,1,opt,name=acquirefy_uid,json=acquirefyUid,proto3" json:"acquirefy_uid,omitempty"`
	Trace                string   `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderByAcquirefyUIDRequest) Reset()         { *m = GetOrderByAcquirefyUIDRequest{} }
func (m *GetOrderByAcquirefyUIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderByAcquirefyUIDRequest) ProtoMessage()    {}
func (*GetOrderByAcquirefyUIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{1}
}
func (m *GetOrderByAcquirefyUIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderByAcquirefyUIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderByAcquirefyUIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrderByAcquirefyUIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderByAcquirefyUIDRequest.Merge(m, src)
}
func (m *GetOrderByAcquirefyUIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderByAcquirefyUIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderByAcquirefyUIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderByAcquirefyUIDRequest proto.InternalMessageInfo

func (m *GetOrderByAcquirefyUIDRequest) GetAcquirefyUid() string {
	if m != nil {
		return m.AcquirefyUid
	}
	return ""
}

func (m *GetOrderByAcquirefyUIDRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetOrderByAcquirefyUIDResponse struct {
	Order                *OrderElement `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetOrderByAcquirefyUIDResponse) Reset()         { *m = GetOrderByAcquirefyUIDResponse{} }
func (m *GetOrderByAcquirefyUIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrderByAcquirefyUIDResponse) ProtoMessage()    {}
func (*GetOrderByAcquirefyUIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{2}
}
func (m *GetOrderByAcquirefyUIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderByAcquirefyUIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderByAcquirefyUIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrderByAcquirefyUIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderByAcquirefyUIDResponse.Merge(m, src)
}
func (m *GetOrderByAcquirefyUIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderByAcquirefyUIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderByAcquirefyUIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderByAcquirefyUIDResponse proto.InternalMessageInfo

func (m *GetOrderByAcquirefyUIDResponse) GetOrder() *OrderElement {
	if m != nil {
		return m.Order
	}
	return nil
}

type OrderElement struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderId           int32    `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	MerchantId           int32    `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Amount               int32    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string   `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	CustomerEmail        string   `protobuf:"bytes,6,opt,name=customer_email,json=customerEmail,proto3" json:"customer_email,omitempty"`
	CustomerPhone        string   `protobuf:"bytes,7,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	Description          string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Status               int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	ProviderUid          string   `protobuf:"bytes,12,opt,name=provider_uid,json=providerUid,proto3" json:"provider_uid,omitempty"`
	MerchantTrackingUid  string   `protobuf:"bytes,13,opt,name=merchant_tracking_uid,json=merchantTrackingUid,proto3" json:"merchant_tracking_uid,omitempty"`
	CredentialName       string   `protobuf:"bytes,14,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	ProviderName         string   `protobuf:"bytes,15,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	AcquirefyUid         string   `protobuf:"bytes,16,opt,name=acquirefy_uid,json=acquirefyUid,proto3" json:"acquirefy_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderElement) Reset()         { *m = OrderElement{} }
func (m *OrderElement) String() string { return proto.CompactTextString(m) }
func (*OrderElement) ProtoMessage()    {}
func (*OrderElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{3}
}
func (m *OrderElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderElement.Merge(m, src)
}
func (m *OrderElement) XXX_Size() int {
	return m.Size()
}
func (m *OrderElement) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderElement.DiscardUnknown(m)
}

var xxx_messageInfo_OrderElement proto.InternalMessageInfo

func (m *OrderElement) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrderElement) GetProviderId() int32 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *OrderElement) GetMerchantId() int32 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *OrderElement) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderElement) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderElement) GetCustomerEmail() string {
	if m != nil {
		return m.CustomerEmail
	}
	return ""
}

func (m *OrderElement) GetCustomerPhone() string {
	if m != nil {
		return m.CustomerPhone
	}
	return ""
}

func (m *OrderElement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OrderElement) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OrderElement) GetProviderUid() string {
	if m != nil {
		return m.ProviderUid
	}
	return ""
}

func (m *OrderElement) GetMerchantTrackingUid() string {
	if m != nil {
		return m.MerchantTrackingUid
	}
	return ""
}

func (m *OrderElement) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *OrderElement) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *OrderElement) GetAcquirefyUid() string {
	if m != nil {
		return m.AcquirefyUid
	}
	return ""
}

type CreateOrderRequest struct {
	Order                *OrderElement `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Trace                string        `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateOrderRequest) Reset()         { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()    {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{4}
}
func (m *CreateOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderRequest.Merge(m, src)
}
func (m *CreateOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderRequest proto.InternalMessageInfo

func (m *CreateOrderRequest) GetOrder() *OrderElement {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *CreateOrderRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type CreateOrderResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AcquirefyUid         string   `protobuf:"bytes,2,opt,name=acquirefy_uid,json=acquirefyUid,proto3" json:"acquirefy_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderResponse) Reset()         { *m = CreateOrderResponse{} }
func (m *CreateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResponse) ProtoMessage()    {}
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{5}
}
func (m *CreateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResponse.Merge(m, src)
}
func (m *CreateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResponse proto.InternalMessageInfo

func (m *CreateOrderResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateOrderResponse) GetAcquirefyUid() string {
	if m != nil {
		return m.AcquirefyUid
	}
	return ""
}

type SetOrderStatusRequest struct {
	TrackingId           string   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	NewStatus            int32    `protobuf:"varint,2,opt,name=newStatus,proto3" json:"newStatus,omitempty"`
	Trace                string   `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetOrderStatusRequest) Reset()         { *m = SetOrderStatusRequest{} }
func (m *SetOrderStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SetOrderStatusRequest) ProtoMessage()    {}
func (*SetOrderStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{6}
}
func (m *SetOrderStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrderStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrderStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrderStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrderStatusRequest.Merge(m, src)
}
func (m *SetOrderStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetOrderStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrderStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrderStatusRequest proto.InternalMessageInfo

func (m *SetOrderStatusRequest) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

func (m *SetOrderStatusRequest) GetNewStatus() int32 {
	if m != nil {
		return m.NewStatus
	}
	return 0
}

func (m *SetOrderStatusRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type SetOrderStatusResponse struct {
	Order                *OrderElement `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetOrderStatusResponse) Reset()         { *m = SetOrderStatusResponse{} }
func (m *SetOrderStatusResponse) String() string { return proto.CompactTextString(m) }
func (*SetOrderStatusResponse) ProtoMessage()    {}
func (*SetOrderStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{7}
}
func (m *SetOrderStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrderStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrderStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrderStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrderStatusResponse.Merge(m, src)
}
func (m *SetOrderStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetOrderStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrderStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrderStatusResponse proto.InternalMessageInfo

func (m *SetOrderStatusResponse) GetOrder() *OrderElement {
	if m != nil {
		return m.Order
	}
	return nil
}

type OrderResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderResponse) Reset()         { *m = OrderResponse{} }
func (m *OrderResponse) String() string { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()    {}
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{8}
}
func (m *OrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponse.Merge(m, src)
}
func (m *OrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponse proto.InternalMessageInfo

func (m *OrderResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Request struct {
	Amount               int32    `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	CustomerEmail        string   `protobuf:"bytes,3,opt,name=customerEmail,proto3" json:"customerEmail,omitempty"`
	CustomerPhone        string   `protobuf:"bytes,4,opt,name=customerPhone,proto3" json:"customerPhone,omitempty"`
	IncludeCommission    bool     `protobuf:"varint,5,opt,name=includeCommission,proto3" json:"includeCommission,omitempty"`
	Rebill               bool     `protobuf:"varint,6,opt,name=rebill,proto3" json:"rebill,omitempty"`
	ShopId               string   `protobuf:"bytes,7,opt,name=shopId,proto3" json:"shopId,omitempty"`
	SecretKey            string   `protobuf:"bytes,8,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	ProviderSlug         string   `protobuf:"bytes,9,opt,name=providerSlug,proto3" json:"providerSlug,omitempty"`
	TrackingId           string   `protobuf:"bytes,10,opt,name=trackingId,proto3" json:"trackingId,omitempty"`
	Trace                string   `protobuf:"bytes,11,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{9}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Request) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Request) GetCustomerEmail() string {
	if m != nil {
		return m.CustomerEmail
	}
	return ""
}

func (m *Request) GetCustomerPhone() string {
	if m != nil {
		return m.CustomerPhone
	}
	return ""
}

func (m *Request) GetIncludeCommission() bool {
	if m != nil {
		return m.IncludeCommission
	}
	return false
}

func (m *Request) GetRebill() bool {
	if m != nil {
		return m.Rebill
	}
	return false
}

func (m *Request) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *Request) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *Request) GetProviderSlug() string {
	if m != nil {
		return m.ProviderSlug
	}
	return ""
}

func (m *Request) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

func (m *Request) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type Response struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RedirectUrl          string   `protobuf:"bytes,2,opt,name=redirectUrl,proto3" json:"redirectUrl,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{10}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Response) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetOrdersByMerchantRequest struct {
	MerchantId           int32    `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Trace                string   `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrdersByMerchantRequest) Reset()         { *m = GetOrdersByMerchantRequest{} }
func (m *GetOrdersByMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrdersByMerchantRequest) ProtoMessage()    {}
func (*GetOrdersByMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{11}
}
func (m *GetOrdersByMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersByMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersByMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersByMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersByMerchantRequest.Merge(m, src)
}
func (m *GetOrdersByMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersByMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersByMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersByMerchantRequest proto.InternalMessageInfo

func (m *GetOrdersByMerchantRequest) GetMerchantId() int32 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *GetOrdersByMerchantRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

type GetOrdersByMerchantResponse struct {
	Orders               []*OrderElement `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetOrdersByMerchantResponse) Reset()         { *m = GetOrdersByMerchantResponse{} }
func (m *GetOrdersByMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrdersByMerchantResponse) ProtoMessage()    {}
func (*GetOrdersByMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{12}
}
func (m *GetOrdersByMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersByMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersByMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersByMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersByMerchantResponse.Merge(m, src)
}
func (m *GetOrdersByMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersByMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersByMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersByMerchantResponse proto.InternalMessageInfo

func (m *GetOrdersByMerchantResponse) GetOrders() []*OrderElement {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetOrdersRequest struct {
	Trace                string   `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrdersRequest) Reset()         { *m = GetOrdersRequest{} }
func (m *GetOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrdersRequest) ProtoMessage()    {}
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{13}
}
func (m *GetOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersRequest.Merge(m, src)
}
func (m *GetOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersRequest proto.InternalMessageInfo

func (m *GetOrdersRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *GetOrdersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetOrdersRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetOrdersResponse struct {
	Orders               []*OrderElement `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetOrdersResponse) Reset()         { *m = GetOrdersResponse{} }
func (m *GetOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrdersResponse) ProtoMessage()    {}
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8962033e1829645a, []int{14}
}
func (m *GetOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersResponse.Merge(m, src)
}
func (m *GetOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersResponse proto.InternalMessageInfo

func (m *GetOrdersResponse) GetOrders() []*OrderElement {
	if m != nil {
		return m.Orders
	}
	return nil
}

func init() {
	proto.RegisterType((*ByIdRequest)(nil), "order_service.ByIdRequest")
	proto.RegisterType((*GetOrderByAcquirefyUIDRequest)(nil), "order_service.GetOrderByAcquirefyUIDRequest")
	proto.RegisterType((*GetOrderByAcquirefyUIDResponse)(nil), "order_service.GetOrderByAcquirefyUIDResponse")
	proto.RegisterType((*OrderElement)(nil), "order_service.OrderElement")
	proto.RegisterType((*CreateOrderRequest)(nil), "order_service.CreateOrderRequest")
	proto.RegisterType((*CreateOrderResponse)(nil), "order_service.CreateOrderResponse")
	proto.RegisterType((*SetOrderStatusRequest)(nil), "order_service.SetOrderStatusRequest")
	proto.RegisterType((*SetOrderStatusResponse)(nil), "order_service.SetOrderStatusResponse")
	proto.RegisterType((*OrderResponse)(nil), "order_service.OrderResponse")
	proto.RegisterType((*Request)(nil), "order_service.Request")
	proto.RegisterType((*Response)(nil), "order_service.Response")
	proto.RegisterType((*GetOrdersByMerchantRequest)(nil), "order_service.GetOrdersByMerchantRequest")
	proto.RegisterType((*GetOrdersByMerchantResponse)(nil), "order_service.GetOrdersByMerchantResponse")
	proto.RegisterType((*GetOrdersRequest)(nil), "order_service.GetOrdersRequest")
	proto.RegisterType((*GetOrdersResponse)(nil), "order_service.GetOrdersResponse")
}

func init() { proto.RegisterFile("order_service/order_service.proto", fileDescriptor_8962033e1829645a) }

var fileDescriptor_8962033e1829645a = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x66, 0x9d, 0x3a, 0xb1, 0x8f, 0x7f, 0x9a, 0x4e, 0x68, 0xb4, 0xda, 0x16, 0xdb, 0x59, 0x5a,
	0x51, 0x50, 0x29, 0x22, 0x79, 0x02, 0x5c, 0x2a, 0x6a, 0x2a, 0x0a, 0x5a, 0x37, 0x5c, 0x20, 0x2a,
	0x6b, 0xbb, 0x7b, 0x92, 0x8c, 0xba, 0x3f, 0xee, 0xcc, 0x6c, 0x91, 0xdf, 0x84, 0xe7, 0xe1, 0x8a,
	0x4b, 0xde, 0x00, 0x14, 0x24, 0x9e, 0x03, 0xcd, 0xec, 0xcc, 0x7a, 0x7f, 0xec, 0x34, 0xd0, 0xcb,
	0xf3, 0xed, 0x37, 0x67, 0xce, 0x99, 0xf3, 0x7d, 0x33, 0x0b, 0x47, 0x29, 0x0b, 0x91, 0x2d, 0x38,
	0xb2, 0xb7, 0x34, 0xc0, 0x2f, 0x2a, 0xd1, 0xa3, 0x25, 0x4b, 0x45, 0x4a, 0x06, 0x15, 0xd0, 0x3d,
	0x81, 0xde, 0x74, 0x35, 0x0b, 0x3d, 0x7c, 0x93, 0x21, 0x17, 0x64, 0x08, 0x2d, 0x1a, 0xda, 0xd6,
	0xc4, 0x7a, 0xd0, 0xf6, 0x5a, 0x34, 0x24, 0x1f, 0x42, 0x5b, 0x30, 0x3f, 0x40, 0xbb, 0x35, 0xb1,
	0x1e, 0x74, 0xbd, 0x3c, 0x70, 0x7f, 0x82, 0x8f, 0xbe, 0x41, 0xf1, 0xbd, 0x4c, 0x34, 0x5d, 0x7d,
	0x15, 0xbc, 0xc9, 0x28, 0xc3, 0xb3, 0xd5, 0xe9, 0xec, 0x6b, 0x93, 0xe6, 0x63, 0x18, 0xf8, 0x06,
	0x5e, 0x64, 0x3a, 0x63, 0xd7, 0xeb, 0x17, 0xe0, 0xe9, 0xd6, 0xdc, 0x73, 0x18, 0x6d, 0xcb, 0xcd,
	0x97, 0x69, 0xc2, 0x91, 0x7c, 0x09, 0x6d, 0xd5, 0x83, 0x4a, 0xda, 0x3b, 0xbe, 0xf3, 0xa8, 0xda,
	0xa6, 0x5a, 0xfa, 0x24, 0xc2, 0x18, 0x13, 0xe1, 0xe5, 0x4c, 0xf7, 0x9f, 0x1d, 0xe8, 0x97, 0xf1,
	0x46, 0x9f, 0x63, 0xe8, 0x2d, 0x59, 0xfa, 0x96, 0xca, 0x44, 0x34, 0x54, 0x15, 0xb5, 0x3d, 0x30,
	0xd0, 0x4c, 0x11, 0x62, 0x64, 0xc1, 0x85, 0x9f, 0x08, 0x49, 0xd8, 0xc9, 0x09, 0x06, 0x9a, 0x85,
	0xe4, 0x10, 0x76, 0xfd, 0x38, 0xcd, 0x12, 0x61, 0xdf, 0x50, 0xdf, 0x74, 0x44, 0x1c, 0xe8, 0x04,
	0x19, 0x63, 0x98, 0x04, 0x2b, 0xbb, 0xad, 0x1a, 0x2d, 0x62, 0x72, 0x1f, 0x86, 0x41, 0xc6, 0x45,
	0x1a, 0x23, 0x5b, 0x60, 0xec, 0xd3, 0xc8, 0xde, 0x55, 0x8c, 0x81, 0x41, 0x9f, 0x48, 0xb0, 0x42,
	0x5b, 0x5e, 0xa4, 0x09, 0xda, 0x7b, 0x55, 0xda, 0x0f, 0x12, 0x24, 0x13, 0xe8, 0x85, 0xc8, 0x03,
	0x46, 0x97, 0x82, 0xa6, 0x89, 0xdd, 0x51, 0x9c, 0x32, 0x24, 0x6b, 0xe4, 0xc2, 0x17, 0x19, 0xb7,
	0x21, 0xaf, 0x31, 0x8f, 0xc8, 0x11, 0xf4, 0x8b, 0xee, 0xe5, 0xb4, 0xfa, 0xf9, 0x52, 0x83, 0xc9,
	0x61, 0x1d, 0xc3, 0xed, 0xa2, 0x7f, 0x39, 0xa8, 0xd7, 0x34, 0x39, 0x57, 0xdc, 0x81, 0xe2, 0x1e,
	0x98, 0x8f, 0x2f, 0xf4, 0x37, 0xb9, 0xe6, 0x13, 0xb8, 0x19, 0x30, 0x0c, 0x31, 0x11, 0xd4, 0x8f,
	0x16, 0x89, 0x1f, 0xa3, 0x3d, 0x54, 0xec, 0xe1, 0x1a, 0x7e, 0xee, 0xc7, 0x28, 0xe5, 0x52, 0xec,
	0xaf, 0x68, 0x37, 0x73, 0xb9, 0x18, 0xd0, 0x90, 0xaa, 0x9a, 0xda, 0x6f, 0x6a, 0xca, 0x7d, 0x09,
	0xe4, 0x31, 0x43, 0x5f, 0xa0, 0x9a, 0xb6, 0x91, 0xe3, 0x7f, 0x57, 0xcc, 0x16, 0x71, 0x7e, 0x0b,
	0x07, 0x95, 0xf4, 0x5a, 0x91, 0x75, 0x35, 0x35, 0x4a, 0x6d, 0x6d, 0x28, 0x35, 0x82, 0xdb, 0x73,
	0x2d, 0xf4, 0xb9, 0x1a, 0x83, 0xa9, 0x76, 0x0c, 0xbd, 0xe2, 0x84, 0x0b, 0xeb, 0x80, 0x81, 0x66,
	0x21, 0xb9, 0x0b, 0xdd, 0x04, 0x7f, 0xc9, 0x17, 0x69, 0xa9, 0xae, 0x81, 0x75, 0xe5, 0x3b, 0xe5,
	0xca, 0x9f, 0xc1, 0x61, 0x7d, 0xb7, 0xff, 0x6f, 0xa7, 0x31, 0x0c, 0xae, 0x3c, 0x00, 0xf7, 0xcf,
	0x16, 0xec, 0x99, 0x76, 0xd6, 0xc6, 0xb0, 0xb6, 0x1a, 0xa3, 0x55, 0x33, 0xc6, 0x3d, 0xa8, 0x5a,
	0x40, 0xf7, 0x52, 0xf3, 0x45, 0x89, 0xa5, 0x1c, 0xa0, 0x9c, 0xd7, 0xb0, 0xc5, 0x43, 0xb8, 0x45,
	0x93, 0x20, 0xca, 0x42, 0x7c, 0x9c, 0xc6, 0x31, 0xe5, 0x5c, 0x9a, 0x43, 0x3a, 0xb1, 0xe3, 0x35,
	0x3f, 0xc8, 0x6a, 0x19, 0xbe, 0xa2, 0x51, 0x6e, 0xc5, 0x8e, 0xa7, 0x23, 0x65, 0x9d, 0x8b, 0x74,
	0x39, 0x0b, 0xb5, 0xf7, 0x74, 0x24, 0x67, 0xc1, 0x31, 0x60, 0x28, 0x9e, 0xe1, 0x4a, 0x5b, 0x6e,
	0x0d, 0x10, 0x77, 0x6d, 0xac, 0x79, 0x94, 0x9d, 0xdb, 0xdd, 0xaa, 0xae, 0x25, 0x46, 0x46, 0x50,
	0x9a, 0xad, 0x32, 0x66, 0x75, 0xda, 0xc5, 0x3c, 0x7b, 0xe5, 0x79, 0xfe, 0x0c, 0x9d, 0xe2, 0xf4,
	0x25, 0x23, 0x7d, 0x8d, 0x89, 0x96, 0x4a, 0x1e, 0xc8, 0xeb, 0x80, 0x61, 0x48, 0x19, 0x06, 0xe2,
	0x94, 0x45, 0xfa, 0x88, 0xcb, 0x10, 0xb1, 0x61, 0x2f, 0x46, 0xce, 0xfd, 0x73, 0xa3, 0x15, 0x13,
	0xba, 0x73, 0x70, 0xcc, 0x25, 0xcc, 0xa7, 0xab, 0xef, 0xb4, 0xb7, 0x4b, 0x02, 0x2d, 0xdf, 0x85,
	0x56, 0xe3, 0x2e, 0xdc, 0x6c, 0x1e, 0x0f, 0xee, 0x6c, 0x4c, 0xaa, 0xbb, 0x38, 0x81, 0x5d, 0xa5,
	0x2e, 0x6e, 0x5b, 0x93, 0x9d, 0x77, 0x09, 0x51, 0x53, 0xdd, 0x1f, 0x61, 0xbf, 0xc8, 0x69, 0xca,
	0x2b, 0x76, 0xb7, 0x4a, 0xbb, 0x4b, 0x34, 0xa2, 0x31, 0x15, 0xda, 0x30, 0x79, 0x20, 0xc7, 0x9a,
	0x9e, 0x9d, 0x71, 0x14, 0xfa, 0x46, 0xd7, 0x91, 0xfb, 0x14, 0x6e, 0x95, 0xf2, 0xbe, 0x47, 0x85,
	0xc7, 0xbf, 0xdd, 0xd0, 0x4f, 0xcf, 0x3c, 0x67, 0x91, 0xa7, 0xd0, 0x5f, 0x3f, 0x70, 0xb3, 0x90,
	0x38, 0xb5, 0x2c, 0xa5, 0xe7, 0xd8, 0xb9, 0xbb, 0x69, 0x87, 0xa2, 0x9e, 0x0c, 0x0e, 0x37, 0x3f,
	0x95, 0xe4, 0x61, 0x6d, 0xdd, 0x95, 0xaf, 0xb5, 0xf3, 0xf9, 0x35, 0xd9, 0x7a, 0xdb, 0xe7, 0xd0,
	0x2d, 0xce, 0x86, 0x8c, 0xb7, 0xac, 0x35, 0xd3, 0x70, 0x26, 0xdb, 0x09, 0x3a, 0x5f, 0x04, 0x07,
	0x1b, 0x74, 0x41, 0x3e, 0xdd, 0xb6, 0xb0, 0x21, 0x48, 0xe7, 0xb3, 0xeb, 0x50, 0xf5, 0x6e, 0x2f,
	0x61, 0x58, 0xbd, 0x08, 0xc9, 0xbd, 0xda, 0xea, 0x8d, 0xb7, 0xb2, 0x73, 0xff, 0x1d, 0x2c, 0x9d,
	0xfe, 0x05, 0xf4, 0x4a, 0x2f, 0x04, 0x39, 0xaa, 0xad, 0x6a, 0x3e, 0x4e, 0x8e, 0x7b, 0x15, 0x25,
	0xcf, 0x3a, 0xdd, 0xff, 0xfd, 0x72, 0x64, 0xfd, 0x71, 0x39, 0xb2, 0xfe, 0xba, 0x1c, 0x59, 0xbf,
	0xfe, 0x3d, 0xfa, 0xe0, 0xd5, 0xae, 0xfa, 0x9b, 0x3b, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0xac, 0xed, 0x25, 0xf2, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOrderById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetOrderByAcquirefyUID(ctx context.Context, in *GetOrderByAcquirefyUIDRequest, opts ...grpc.CallOption) (*GetOrderByAcquirefyUIDResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetOrdersByMerchant(ctx context.Context, in *GetOrdersByMerchantRequest, opts ...grpc.CallOption) (*GetOrdersByMerchantResponse, error)
	SetOrderStatus(ctx context.Context, in *SetOrderStatusRequest, opts ...grpc.CallOption) (*SetOrderStatusResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrderById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByAcquirefyUID(ctx context.Context, in *GetOrderByAcquirefyUIDRequest, opts ...grpc.CallOption) (*GetOrderByAcquirefyUIDResponse, error) {
	out := new(GetOrderByAcquirefyUIDResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetOrderByAcquirefyUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByMerchant(ctx context.Context, in *GetOrdersByMerchantRequest, opts ...grpc.CallOption) (*GetOrdersByMerchantResponse, error) {
	out := new(GetOrdersByMerchantResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetOrdersByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetOrderStatus(ctx context.Context, in *SetOrderStatusRequest, opts ...grpc.CallOption) (*SetOrderStatusResponse, error) {
	out := new(SetOrderStatusResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/SetOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	GetOrderById(context.Context, *ByIdRequest) (*OrderResponse, error)
	GetOrderByAcquirefyUID(context.Context, *GetOrderByAcquirefyUIDRequest) (*GetOrderByAcquirefyUIDResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetOrdersByMerchant(context.Context, *GetOrdersByMerchantRequest) (*GetOrdersByMerchantResponse, error)
	SetOrderStatus(context.Context, *SetOrderStatusRequest) (*SetOrderStatusResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) GetOrderById(ctx context.Context, req *ByIdRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrderByAcquirefyUID(ctx context.Context, req *GetOrderByAcquirefyUIDRequest) (*GetOrderByAcquirefyUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByAcquirefyUID not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrders(ctx context.Context, req *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrdersByMerchant(ctx context.Context, req *GetOrdersByMerchantRequest) (*GetOrdersByMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByMerchant not implemented")
}
func (*UnimplementedOrderServiceServer) SetOrderStatus(ctx context.Context, req *SetOrderStatusRequest) (*SetOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderStatus not implemented")
}
func (*UnimplementedOrderServiceServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderById(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByAcquirefyUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByAcquirefyUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByAcquirefyUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetOrderByAcquirefyUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByAcquirefyUID(ctx, req.(*GetOrderByAcquirefyUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetOrdersByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByMerchant(ctx, req.(*GetOrdersByMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/SetOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetOrderStatus(ctx, req.(*SetOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderById",
			Handler:    _OrderService_GetOrderById_Handler,
		},
		{
			MethodName: "GetOrderByAcquirefyUID",
			Handler:    _OrderService_GetOrderByAcquirefyUID_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrderService_GetOrders_Handler,
		},
		{
			MethodName: "GetOrdersByMerchant",
			Handler:    _OrderService_GetOrdersByMerchant_Handler,
		},
		{
			MethodName: "SetOrderStatus",
			Handler:    _OrderService_SetOrderStatus_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service/order_service.proto",
}

func (m *ByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOrderByAcquirefyUIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderByAcquirefyUIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrderByAcquirefyUIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AcquirefyUid) > 0 {
		i -= len(m.AcquirefyUid)
		copy(dAtA[i:], m.AcquirefyUid)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.AcquirefyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrderByAcquirefyUIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderByAcquirefyUIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrderByAcquirefyUIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrderService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AcquirefyUid) > 0 {
		i -= len(m.AcquirefyUid)
		copy(dAtA[i:], m.AcquirefyUid)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.AcquirefyUid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MerchantTrackingUid) > 0 {
		i -= len(m.MerchantTrackingUid)
		copy(dAtA[i:], m.MerchantTrackingUid)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.MerchantTrackingUid)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ProviderUid) > 0 {
		i -= len(m.ProviderUid)
		copy(dAtA[i:], m.ProviderUid)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.ProviderUid)))
		i--
		dAtA[i] = 0x62
	}
	if m.Status != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CustomerPhone) > 0 {
		i -= len(m.CustomerPhone)
		copy(dAtA[i:], m.CustomerPhone)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.CustomerPhone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CustomerEmail) > 0 {
		i -= len(m.CustomerEmail)
		copy(dAtA[i:], m.CustomerEmail)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.CustomerEmail)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.ProviderId != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrderService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AcquirefyUid) > 0 {
		i -= len(m.AcquirefyUid)
		copy(dAtA[i:], m.AcquirefyUid)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.AcquirefyUid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetOrderStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrderStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrderStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewStatus != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TrackingId) > 0 {
		i -= len(m.TrackingId)
		copy(dAtA[i:], m.TrackingId)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.TrackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOrderStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrderStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrderStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrderService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TrackingId) > 0 {
		i -= len(m.TrackingId)
		copy(dAtA[i:], m.TrackingId)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.TrackingId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProviderSlug) > 0 {
		i -= len(m.ProviderSlug)
		copy(dAtA[i:], m.ProviderSlug)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.ProviderSlug)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecretKey) > 0 {
		i -= len(m.SecretKey)
		copy(dAtA[i:], m.SecretKey)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.SecretKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ShopId) > 0 {
		i -= len(m.ShopId)
		copy(dAtA[i:], m.ShopId)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.ShopId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rebill {
		i--
		if m.Rebill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IncludeCommission {
		i--
		if m.IncludeCommission {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CustomerPhone) > 0 {
		i -= len(m.CustomerPhone)
		copy(dAtA[i:], m.CustomerPhone)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.CustomerPhone)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CustomerEmail) > 0 {
		i -= len(m.CustomerEmail)
		copy(dAtA[i:], m.CustomerEmail)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.CustomerEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersByMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersByMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersByMerchantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0x12
	}
	if m.MerchantId != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.MerchantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersByMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersByMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersByMerchantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintOrderService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintOrderService(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderService(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrderService(uint64(m.Id))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrderByAcquirefyUIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AcquirefyUid)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrderByAcquirefyUIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrderService(uint64(m.Id))
	}
	if m.ProviderId != 0 {
		n += 1 + sovOrderService(uint64(m.ProviderId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovOrderService(uint64(m.MerchantId))
	}
	if m.Amount != 0 {
		n += 1 + sovOrderService(uint64(m.Amount))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.CustomerEmail)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.CustomerPhone)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOrderService(uint64(m.Status))
	}
	l = len(m.ProviderUid)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.MerchantTrackingUid)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.AcquirefyUid)
	if l > 0 {
		n += 2 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrderService(uint64(m.Id))
	}
	l = len(m.AcquirefyUid)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetOrderStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrackingId)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.NewStatus != 0 {
		n += 1 + sovOrderService(uint64(m.NewStatus))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetOrderStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrderService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovOrderService(uint64(m.Amount))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.CustomerEmail)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.CustomerPhone)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.IncludeCommission {
		n += 2
	}
	if m.Rebill {
		n += 2
	}
	l = len(m.ShopId)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.SecretKey)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.ProviderSlug)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.TrackingId)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrdersByMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != 0 {
		n += 1 + sovOrderService(uint64(m.MerchantId))
	}
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrdersByMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovOrderService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovOrderService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovOrderService(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrderService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderService(x uint64) (n int) {
	return sovOrderService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderByAcquirefyUIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderByAcquirefyUIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderByAcquirefyUIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcquirefyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcquirefyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderByAcquirefyUIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderByAcquirefyUIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderByAcquirefyUIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &OrderElement{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantTrackingUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantTrackingUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcquirefyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcquirefyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &OrderElement{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcquirefyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcquirefyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrderStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrderStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrderStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrderStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrderStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrderStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &OrderElement{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeCommission", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeCommission = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebill = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderSlug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderSlug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersByMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersByMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersByMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersByMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersByMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersByMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderElement{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderElement{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderService = fmt.Errorf("proto: unexpected end of group")
)
